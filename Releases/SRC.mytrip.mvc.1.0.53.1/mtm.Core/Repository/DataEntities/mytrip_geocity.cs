//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace mtm.Core.Repository.DataEntities
{
    public partial class mytrip_geocity
    {
        #region Primitive Properties
    
        public virtual int CityId
        {
            get;
            set;
        }
    
        public virtual int RegionId
        {
            get { return _regionId; }
            set
            {
                if (_regionId != value)
                {
                    if (mytrip_georegion != null && mytrip_georegion.RegionId != value)
                    {
                        mytrip_georegion = null;
                    }
                    _regionId = value;
                }
            }
        }
        private int _regionId;
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> Longitude
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> Latitude
        {
            get;
            set;
        }
    
        public virtual bool EditAdmin
        {
            get;
            set;
        }
    
        public virtual bool EditUser
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual mytrip_georegion mytrip_georegion
        {
            get { return _mytrip_georegion; }
            set
            {
                if (!ReferenceEquals(_mytrip_georegion, value))
                {
                    var previousValue = _mytrip_georegion;
                    _mytrip_georegion = value;
                    Fixupmytrip_georegion(previousValue);
                }
            }
        }
        private mytrip_georegion _mytrip_georegion;
    
        public virtual ICollection<mytrip_corestatistic> mytrip_corestatistic
        {
            get
            {
                if (_mytrip_corestatistic == null)
                {
                    var newCollection = new FixupCollection<mytrip_corestatistic>();
                    newCollection.CollectionChanged += Fixupmytrip_corestatistic;
                    _mytrip_corestatistic = newCollection;
                }
                return _mytrip_corestatistic;
            }
            set
            {
                if (!ReferenceEquals(_mytrip_corestatistic, value))
                {
                    var previousValue = _mytrip_corestatistic as FixupCollection<mytrip_corestatistic>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupmytrip_corestatistic;
                    }
                    _mytrip_corestatistic = value;
                    var newValue = value as FixupCollection<mytrip_corestatistic>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupmytrip_corestatistic;
                    }
                }
            }
        }
        private ICollection<mytrip_corestatistic> _mytrip_corestatistic;
    
        public virtual ICollection<mytrip_usersprofile> mytrip_usersprofile
        {
            get
            {
                if (_mytrip_usersprofile == null)
                {
                    var newCollection = new FixupCollection<mytrip_usersprofile>();
                    newCollection.CollectionChanged += Fixupmytrip_usersprofile;
                    _mytrip_usersprofile = newCollection;
                }
                return _mytrip_usersprofile;
            }
            set
            {
                if (!ReferenceEquals(_mytrip_usersprofile, value))
                {
                    var previousValue = _mytrip_usersprofile as FixupCollection<mytrip_usersprofile>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupmytrip_usersprofile;
                    }
                    _mytrip_usersprofile = value;
                    var newValue = value as FixupCollection<mytrip_usersprofile>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupmytrip_usersprofile;
                    }
                }
            }
        }
        private ICollection<mytrip_usersprofile> _mytrip_usersprofile;

        #endregion
        #region Association Fixup
    
        private void Fixupmytrip_georegion(mytrip_georegion previousValue)
        {
            if (previousValue != null && previousValue.mytrip_geocity.Contains(this))
            {
                previousValue.mytrip_geocity.Remove(this);
            }
    
            if (mytrip_georegion != null)
            {
                if (!mytrip_georegion.mytrip_geocity.Contains(this))
                {
                    mytrip_georegion.mytrip_geocity.Add(this);
                }
                if (RegionId != mytrip_georegion.RegionId)
                {
                    RegionId = mytrip_georegion.RegionId;
                }
            }
        }
    
        private void Fixupmytrip_corestatistic(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (mytrip_corestatistic item in e.NewItems)
                {
                    item.mytrip_geocity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (mytrip_corestatistic item in e.OldItems)
                {
                    if (ReferenceEquals(item.mytrip_geocity, this))
                    {
                        item.mytrip_geocity = null;
                    }
                }
            }
        }
    
        private void Fixupmytrip_usersprofile(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (mytrip_usersprofile item in e.NewItems)
                {
                    item.mytrip_geocity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (mytrip_usersprofile item in e.OldItems)
                {
                    if (ReferenceEquals(item.mytrip_geocity, this))
                    {
                        item.mytrip_geocity = null;
                    }
                }
            }
        }

        #endregion
    }
}
